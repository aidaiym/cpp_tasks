// Lab 5
// # 1
//  A two-dimensional array with 3 rows and 4 columns is given. Find the largest element, the number of row and column in which it is located.

#include <iostream>
using namespace std;
int main()
{
    int m, n, largest, smallest;
    int largrowloc, largcolumnloc, smallrowloc, smallcolumnloc;

    // take number of rows and columns
    cout << "Enter number of row and column: ";
    cin >> m;
    cin >> n;

    // declare array by given number of rows and columns
    int arr[m][n], i, j;

    // take array elements as input
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            cout << "Enter arr: "
                 << "[" << i << "]"
                 << "[" << j << "] ";
            cin >> arr[i][j];
        }
        cout << endl;
    }

    // display array (optional)

    cout << "Entered 2D Array: " << endl;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }

    // assume first element is
    // largest and smallest
    largest = arr[0][0];
    smallest = arr[0][0];

    // compare with all elements
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (largest < arr[i][j])
            {
                largest = arr[i][j];
                largrowloc = i;    // row location of largest element
                largcolumnloc = j; // column location of largest element
            }

            if (smallest > arr[i][j])
            {
                smallest = arr[i][j];
                smallrowloc = i;    // row location of smallest element
                smallcolumnloc = j; // column location of smallest element
            }
        }
    }
    // display results
    cout << endl;
    cout << "Largest element in array is " << largest << "in location arr[" << largrowloc << "][" << largcolumnloc << "]" << endl;
    cout << "Smallest element in array is " << smallest << "in location arr[" << smallrowloc << "][" << smallcolumnloc << "]" << endl;
    return 0;
}
/* 
#3 Assign unique random values to the array elements, that is, you want to fill the array
with random numbers, but each number in the array must not occur more than once. When
designing such an algorithm, a special situation must be highlighted at once - if the size of the
array is greater than the number of different random numbers generated by PRNG generator, it
will be impossible to solve the problem.
*/
#include <iostream>
using namespace std;
int main()
{
    int arr[3][6], i, j;
    float arithmetic_mean, summ, summ1, summ2, summ3, summ4, summ5, counter, counter1, counter2, counter3, counter4, counter5;
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 6; j++)
        {
            cout << "Enter arr: "
                 << "[" << i << "]"
                 << "[" << j << "] ";
            cin >> arr[i][j];
        }
        cout << endl;
    }

    cout << "Entered 2D Array: " << endl;

    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 6; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }

    for (i = 0; i < 3; i++)
    {
        if (arr[i][0] > 0)
        {
            summ += arr[i][0];
            counter++;
        }
        if (arr[i][1] > 0)
        {
            summ1 += arr[i][1];
            counter1++;
        }
        if (arr[i][2] > 0)
        {
            summ2 += arr[i][2];
            counter2++;
        }
        if (arr[i][3] > 0)
        {
            summ3 += arr[i][3];
            counter3++;
        }
        if (arr[i][4] > 0)
        {
            summ4 += arr[i][4];
            counter4++;
        }
        if (arr[i][5] > 0)
        {
            summ5 += arr[i][5];
            counter5++;
        }
    }
    cout << "Arithmetic mean column 1 = " << summ / counter << endl;
    cout << "Arithmetic mean column 2  =  " << summ1 / counter1 << endl;
    cout << "Arithmetic mean column 3  = " << summ2 / counter2 << endl;
    cout << "Arithmetic mean column 4  = " << summ3 / counter3 << endl;
    cout << "Arithmetic mean column 5  = " << summ4 / counter4 << endl;
    cout << "Arithmetic mean column 6  =  " << summ5 / counter5 << endl;
    return 0;
}

// #4 A real square matrix is given. Replace by zeroes all elements located on the main diagonal and above it
#include <iostream>
using namespace std;
int main()
{
    int m;
    cout << "Enter number of columns/rows: ";
    cin >> m;
    int arr[m][m], i, j;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < m; j++)
        {
            cout << "Enter arr: "
                 << "[" << i << "]"
                 << "[" << j << "] ";
            cin >> arr[i][j];
        }
        cout << endl;
    }

    cout << "Entered 2D Array: " << endl;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < m; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    cout << "Array: " << endl;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (i == j)
            {
                arr[i][j] = 0;
            }
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

// #5 Given 8 real numbers x1, x2, ..., x8. Get a square matrix 8x8
#include <iostream>
using namespace std;
int main()
{
    int arr[8][8], x[8] = {2, 4, 56, 7, 2, 4, 1, 2};
    cout << "Square matrix 8x8: " << endl;
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            arr[i][j] = x[i] + x[j];
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}

/*
#6 A soccer championship table is given by a square matrix of order n, in which all elements that
belong to the main diagonal are zero, and every element that does not belong to the main
diagonal is 2, 1 or 0 (the result of the game: 2 - win, 1 - draw, 0 - lose). When filling the table it
is desirable to use random number generation
a) Find the number of teams with more wins than losses.
b) Find the numbers of teams that passed the championship without losses.
c) Find out if there is at least one team that wins more than half of the games.
*/
// #7 There is a two-dimensional array with 3 rows and 4 columns. Arrange the array in descending order of the elements of the 3rd row.
#include <iostream>
using namespace std;
int main()

{
    int arr[3][4], i, j, x;
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
        {
            cout << "Enter arr: "
                 << "[" << i << "]"
                 << "[" << j << "] ";
            cin >> arr[i][j];
        }
        cout << endl;
    }
    cout << "Entered 2D Array: " << endl;

    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    for (j = 0; j < 4; j++)
        for (i = 0; i < 4; i++)
            if (arr[2][j] < arr[2][i])
            {
                for (int k = 0; k < 3; k++)
                {
                    x = arr[k][i];
                    arr[k][i] = arr[k][j];
                    arr[k][j] = x;
                }
            }
    cout << "Array in descending order of the elements of the 3rd row: " << endl;

    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
            cout << arr[i][j] << " ";
        cout << endl;
    }
    return 0;
}

// 2;6;8;9;10;11;12 not done 