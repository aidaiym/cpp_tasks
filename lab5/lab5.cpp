// Lab 5
// # 1
//  A two-dimensional array with 3 rows and 4 columns is given. Find the largest element, the number of row and column in which it is located.

#include <iostream>
using namespace std;
int main()
{
    int m, n, largest, smallest, largrowloc, largcolumnloc, smallrowloc, smallcolumnloc;
    cout << "Enter number of row and column: ";
    cin >> m;
    cin >> n;
    int arr[m][n], i, j;
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            cout << "Enter arr: "
                 << "[" << i << "]"
                 << "[" << j << "] ";
            cin >> arr[i][j];
        }
        cout << endl;
    }
    cout << "Entered Array: " << endl;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (arr[0][0] < arr[i][j])
            {
                largest = arr[i][j];
                largrowloc = i;
                largcolumnloc = j;
            }

            if (arr[0][0] > arr[i][j])
            {
                smallest = arr[i][j];
                smallrowloc = i;
                smallcolumnloc = j;
            }
        }
    }
    cout << endl;
    cout << "Largest element in array is " << largest << " in location arr[" << largrowloc << "][" << largcolumnloc << "]" << endl;
    cout << "Smallest element in array is " << smallest << " in location arr[" << smallrowloc << "][" << smallcolumnloc << "]" << endl;
    return 0;
}

/*
#2
Make a program to calculate the arithmetic mean of the positive elements of each
column of a two-dimensional array containing 6 columns and three rows. Assuming that each
column has at least one positive element.
*/
#include <iostream>
using namespace std;
int main()
{
    int arr[3][6], i, j;
    float arithmetic_mean, summ, summ1, summ2, summ3, summ4, summ5, counter, counter1, counter2, counter3, counter4, counter5;
    srand(time(NULL));

    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 6; j++)
        {

            arr[i][j] = rand() % 100;
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }

    for (i = 0; i < 3; i++)
    {
        if (arr[i][0] > 0)
        {
            summ += arr[i][0];
            counter++;
        }
        if (arr[i][1] > 0)
        {
            summ1 += arr[i][1];
            counter1++;
        }
        if (arr[i][2] > 0)
        {
            summ2 += arr[i][2];
            counter2++;
        }
        if (arr[i][3] > 0)
        {
            summ3 += arr[i][3];
            counter3++;
        }
        if (arr[i][4] > 0)
        {
            summ4 += arr[i][4];
            counter4++;
        }
        if (arr[i][5] > 0)
        {
            summ5 += arr[i][5];
            counter5++;
        }
    }
    cout << "Arithmetic mean column 1 = " << summ / counter << endl;
    cout << "Arithmetic mean column 2  =  " << summ1 / counter1 << endl;
    cout << "Arithmetic mean column 3  = " << summ2 / counter2 << endl;
    cout << "Arithmetic mean column 4  = " << summ3 / counter3 << endl;
    cout << "Arithmetic mean column 5  = " << summ4 / counter4 << endl;
    cout << "Arithmetic mean column 6  =  " << summ5 / counter5 << endl;
    return 0;
}

// #3
/*
Assign unique random values to the array elements, that is, you want to fill the array
with random numbers, but each number in the array must not occur more than once. When
designing such an algorithm, a special situation must be highlighted at once - if the size of the
array is greater than the number of different random numbers generated by PRNG generator, it
will be impossible to solve the problem.
*/
#include <iostream>
#include <ctime>
#include <cstdlib>
using namespace std;

int main()
{
    int numbers[10];
    for (int i = 0; i < 10; i++)
    {
        bool same;
        do
        {
            same = false;
            numbers[i] = rand() % 1000 + 1;
            for (int check = 0; check < i; check++)
            {
                if (numbers[i] == numbers[check])
                {
                    same = true;
                    break;
                }
            }
        } while (same);
    }
    cout << "Unique Array:" << endl;

    for (int sub = 0; sub < 10; sub++)
    {
        cout << numbers[sub] << " ";
    }
    return 0;
}

// #4 A real square matrix is given. Replace by zeroes all elements located on the main diagonal and above it
#include <iostream>
using namespace std;
int main()
{
    int m;
    cout << "Enter number of columns/rows: ";
    cin >> m;
    int arr[m][m], i, j;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < m; j++)
        {
            cout << "Enter arr: "
                 << "[" << i << "]"
                 << "[" << j << "] ";
            cin >> arr[i][j];
        }
        cout << endl;
    }

    cout << "Entered 2D Array: " << endl;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < m; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    cout << "Array: " << endl;

    for (i = 0; i < m; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (i == j)
            {
                arr[i][j] = 0;
            }
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

// #5 Given 8 real numbers x1, x2, ..., x8. Get a square matrix 8x8
#include <iostream>
using namespace std;
int main()
{
    int arr[8][8], x[8] = {2, 4, 56, 7, 2, 4, 1, 2};
    cout << "Square matrix 8x8: " << endl;
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            arr[i][j] = x[i] + x[j];
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}
// #6
/*
A soccer championship table is given by a square matrix of order n, in which all elements that
belong to the main diagonal are zero, and every element that does not belong to the main
diagonal is 2, 1 or 0 (the result of the game: 2 - win, 1 - draw, 0 - lose). When filling the table it
is desirable to use random number generation
a) Find the number of teams with more wins than losses.
b) Find the numbers of teams that passed the championship without losses.
c) Find out if there is at least one team that wins more than half of the games.
*/
#include <iostream>
#include <cstdlib>

using namespace std;

int main()
{
    srand(time(NULL));

    const int n = 10;
    int m[n][n];

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (i == j)
            {
                m[i][j] = 0;
            }

            else
            {
                m[i][j] = rand() % 3;
            }
            cout << m[i][j] << " ";
        }
        cout << endl;
    }

    int more_wins = 0;

    for (int i = 0; i < n; i++)
    {
        int win = 0, lose = 0;
        for (int j = 0; j < n; j++)
        {
            if (m[i][j] == 2)
                win++;
            if (m[i][j] == 0)
                lose++;
        }
        if (win > 9)
        {
            cout << "Team number " << (i + 1) << " team that wins more than half of the games " << endl;
        }
        if (win > 5)
        {
            cout << "Team number " << (i + 1) << " passed the championship without losses" << endl;
        }
        if (win > lose)
        {
            more_wins++;
            cout << "Team number " << (i + 1) << " has " << win << " wins and " << lose << " loses" << endl;
        }
    }

    cout << "Number of teams with more wins than loses is " << more_wins << endl;
    return 0;
}
// #7 There is a two-dimensional array with 3 rows and 4 columns. Arrange the array in descending order of the elements of the 3rd row.
#include <iostream>
using namespace std;
int main()

{
    int arr[3][4], i, j, x;
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
        {
            cout << "Enter arr: "
                 << "[" << i << "]"
                 << "[" << j << "] ";
            cin >> arr[i][j];
        }
        cout << endl;
    }
    cout << "Entered 2D Array: " << endl;

    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    for (j = 0; j < 4; j++)
        for (i = 0; i < 4; i++)
            if (arr[2][j] < arr[2][i])
            {
                for (int k = 0; k < 3; k++)
                {
                    x = arr[k][i];
                    arr[k][i] = arr[k][j];
                    arr[k][j] = x;
                }
            }
    cout << "Array in descending order of the elements of the 3rd row: " << endl;

    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
            cout << arr[i][j] << " ";
        cout << endl;
    }
    return 0;
}
// #8 There is a two-dimensional array with 5 rows and 2 columns. Arrange the array in ascending order of the elements of the 2nd column.
#include <iostream>
using namespace std;
int main()
{
    int arr[5][2], i, j, x;
    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 2; j++)
        {
            cout << "Enter arr: "
                 << "[" << i << "]"
                 << "[" << j << "] ";
            cin >> arr[i][j];
        }
        cout << endl;
    }
    cout << "Entered  Array: " << endl;
    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 2; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    for (j = 0; j < 5; j++)
    {
        for (i = j + 1; i < 5; i++)
        {
            if (arr[j][1] > arr[i][1])
            {
                x = arr[j][1];
                arr[j][1] = arr[i][1];
                arr[i][1] = x;
            }
        }
    }
    cout << "Array in ascending order of the elements of the 2nd column: " << endl;

    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 2; j++)
            cout << arr[i][j] << " ";
        cout << endl;
    }
    return 0;
}
// #9 Given integers. Get an integer matrix b, each element of which is defined by the following formula, i, j=0,1,2.
#include <iostream>
using namespace std;
int main()

{
    int i, len, m, n;
    int arr[m][n];
    cout << "Type integers length: ";
    cin >> len;
    int a[len];
    for (i = 0; i < len; i++)
    {
        cout << "a" << i << " ";
        cin >> a[i];
    }

    for (m = 0; m < len; m++)
    {
        for (n = 0; n < len; n++)
        {
            arr[m][n] = a[m] - (3 * a[n]);
        }
    }
    cout << "Array in descending order of the elements of the 3rd row: " << endl;

    for (m = 0; m < len; m++)
    {
        for (n = 0; n < len; n++)
            cout << arr[m][n] << " ";
        cout << endl;
    }
    return 0;
}
// #10 Given a square matrix A containing 5 rows and 5 columns. Obtain two square matrices B and C, the elements of which are determined by the following formulas
#include <iostream>
using namespace std;
int main()
{
    int a[5][5], b[5][5], c[5][5];
    cout << "Array A" << endl;

    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            a[i][j] = rand() % 100;
            cout << a[i][j] << " ";
        }
        cout << endl;
    }
    cout << "Array C" << endl;

    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            if (j >= 0)
                b[i][j] = a[i][j];

            if (j < i)
                b[i][j] = a[j][i];
            if (j < i)
                c[i][j] = (a[i][j]);
            if (j >= i)
                c[i][j] = -(a[i][j]);

            cout << c[i][j] << " ";
        }
        cout << endl;
    }
    cout << "Array B" << endl;

    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            cout << b[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}
// #11 Find the largest element of the main diagonal of matrix C of size 4x4 and print the entire row in which it is located.

#include <iostream>
using namespace std;
int main()
{
    int largest, largrowloc, largcolumnloc;
    srand(time(NULL));

    const int n = 4;
    int m[n][n];

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {

            m[i][j] = rand() % 100;

            cout << m[i][j] << " ";
        }
        cout << endl;
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (i == j & m[0][0] <= m[i][i])
            {
                largest = m[i][i];
                largrowloc = i;
                largcolumnloc = i;
            }
        }
    }
    cout << endl;
    cout << "Largest element in array is " << largest << " in location arr[" << largrowloc << "][" << largcolumnloc << "]" << endl;

    return 0;
}

// #12 Count the number of prime numbers in a two-dimensional array consisting of integers obtained at random.

#include <iostream>
#include <cstdlib>

using namespace std;
int checkPrime(int num)
{
    if (num <= 1)
    {
        return 0;
    }
    for (int j = 2; j <= num / 2; j++)
    {
        if (num % j == 0)
        {
            return 0;
        }
        return 1;
    }
}

int main()
{
    srand(time(NULL));

    int m[4][5];
    int isprime = 0;
    int count = 0;

    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            m[i][j] = rand() % 100;
            cout << m[i][j] << " ";
        }
        cout << endl;
    }
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            isprime = checkPrime(m[i][j]);
            if (isprime == 1)
                count++;
        }
    }
    cout << "Count of number of primes in array : " << count << endl;
    return 0;
}
